{"version":3,"file":"default-node_modules_angular_material___ivy_ngcc___fesm2015_autocomplete_js.js","mappings":"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","sources":["./node_modules/@angular/material/__ivy_ngcc__/fesm2015/autocomplete.js"],"sourcesContent":["import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\nimport { Platform, _getShadowRoot } from '@angular/cdk/platform';\nimport { InjectionToken, EventEmitter, Directive, ChangeDetectorRef, ElementRef, Inject, ViewChild, TemplateRef, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, ViewContainerRef, NgZone, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ESCAPE, hasModifierKey, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/cdk/bidi';\nimport * as ɵngcc5 from '@angular/cdk/scrolling';\nimport * as ɵngcc6 from '@angular/material/form-field';\n\nconst _c0 = [\"panel\"];\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const formFieldId_r1 = ctx.id;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0._getPanelAriaLabelledby(formFieldId_r1));\n} }\nconst _c1 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source, \n    /** Option that was selected. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {\n}\nconst _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\nclass _MatAutocompleteBase extends _MatAutocompleteMixinBase {\n    constructor(_changeDetectorRef, _elementRef, defaults, platform) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._activeOptionChanges = Subscription.EMPTY;\n        /** Whether the autocomplete panel should be visible, depending on option length. */\n        this.showPanel = false;\n        this._isOpen = false;\n        /** Function that maps an option's control value to its display value in the trigger. */\n        this.displayWith = null;\n        /** Event that is emitted whenever an option from the list is selected. */\n        this.optionSelected = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is opened. */\n        this.opened = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is closed. */\n        this.closed = new EventEmitter();\n        /** Emits whenever an option is activated using the keyboard. */\n        this.optionActivated = new EventEmitter();\n        this._classList = {};\n        /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n        // Safari using VoiceOver. We should occasionally check back to see whether the bug\n        // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n        // option altogether.\n        this.inertGroups = (platform === null || platform === void 0 ? void 0 : platform.SAFARI) || false;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /** Whether the autocomplete panel is open. */\n    get isOpen() { return this._isOpen && this.showPanel; }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = coerceStringArray(value).reduce((classList, className) => {\n                classList[className] = true;\n                return classList;\n            }, {});\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n            this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n        });\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    ngOnDestroy() {\n        this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /** Returns the panel's scrollTop. */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n    _emitSelectEvent(option) {\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /** Gets the aria-labelledby for the autocomplete panel. */\n    _getPanelAriaLabelledby(labelId) {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n    _setVisibilityClasses(classList) {\n        classList[this._visibleClass] = this.showPanel;\n        classList[this._hiddenClass] = !this.showPanel;\n    }\n}\n_MatAutocompleteBase.ɵfac = function _MatAutocompleteBase_Factory(t) { return new (t || _MatAutocompleteBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform)); };\n_MatAutocompleteBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteBase, viewQuery: function _MatAutocompleteBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TemplateRef, 7);\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    } }, inputs: { displayWith: \"displayWith\", autoActiveFirstOption: \"autoActiveFirstOption\", classList: [\"class\", \"classList\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], panelWidth: \"panelWidth\" }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n_MatAutocompleteBase.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] },\n    { type: Platform }\n];\n_MatAutocompleteBase.propDecorators = {\n    template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    displayWith: [{ type: Input }],\n    autoActiveFirstOption: [{ type: Input }],\n    panelWidth: [{ type: Input }],\n    optionSelected: [{ type: Output }],\n    opened: [{ type: Output }],\n    closed: [{ type: Output }],\n    optionActivated: [{ type: Output }],\n    classList: [{ type: Input, args: ['class',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }, { type: ɵngcc1.Platform }]; }, { displayWith: [{\n            type: Input\n        }], optionSelected: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], closed: [{\n            type: Output\n        }], optionActivated: [{\n            type: Output\n        }], autoActiveFirstOption: [{\n            type: Input\n        }], classList: [{\n            type: Input,\n            args: ['class']\n        }], template: [{\n            type: ViewChild,\n            args: [TemplateRef, { static: true }]\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], panelWidth: [{\n            type: Input\n        }] }); })();\nclass MatAutocomplete extends _MatAutocompleteBase {\n    constructor() {\n        super(...arguments);\n        this._visibleClass = 'mat-autocomplete-visible';\n        this._hiddenClass = 'mat-autocomplete-hidden';\n    }\n}\nMatAutocomplete.ɵfac = /*@__PURE__*/ function () { let ɵMatAutocomplete_BaseFactory; return function MatAutocomplete_Factory(t) { return (ɵMatAutocomplete_BaseFactory || (ɵMatAutocomplete_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocomplete)))(t || MatAutocomplete); }; }();\nMatAutocomplete.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatAutocomplete, selectors: [[\"mat-autocomplete\"]], contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n    } }, hostAttrs: [1, \"mat-autocomplete\"], inputs: { disableRipple: \"disableRipple\" }, exportAs: [\"matAutocomplete\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 1, vars: 0, consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]], template: function MatAutocomplete_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 4, \"ng-template\");\n    } }, dependencies: [ɵngcc2.NgClass], styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatAutocomplete.propDecorators = {\n    optionGroups: [{ type: ContentChildren, args: [MAT_OPTGROUP, { descendants: true },] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n        type: Component,\n        args: [{ selector: 'mat-autocomplete', template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div class=\\\"mat-autocomplete-panel\\\"\\n       role=\\\"listbox\\\"\\n       [id]=\\\"id\\\"\\n       [attr.aria-label]=\\\"ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n       [ngClass]=\\\"_classList\\\"\\n       #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, exportAs: 'matAutocomplete', inputs: ['disableRipple'], host: {\n                    'class': 'mat-autocomplete'\n                }, providers: [\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n                ], styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"] }]\n    }], null, { optionGroups: [{\n            type: ContentChildren,\n            args: [MAT_OPTGROUP, { descendants: true }]\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\nclass _MatAutocompleteOriginBase {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\n_MatAutocompleteOriginBase.ɵfac = function _MatAutocompleteOriginBase_Factory(t) { return new (t || _MatAutocompleteOriginBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\n_MatAutocompleteOriginBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteOriginBase });\n_MatAutocompleteOriginBase.ctorParameters = () => [\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteOriginBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin extends _MatAutocompleteOriginBase {\n}\nMatAutocompleteOrigin.ɵfac = /*@__PURE__*/ function () { let ɵMatAutocompleteOrigin_BaseFactory; return function MatAutocompleteOrigin_Factory(t) { return (ɵMatAutocompleteOrigin_BaseFactory || (ɵMatAutocompleteOrigin_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteOrigin)))(t || MatAutocompleteOrigin); }; }();\nMatAutocompleteOrigin.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteOrigin, selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]], exportAs: [\"matAutocompleteOrigin\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin'\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n/**\n * The height of each autocomplete option.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 12.0.0\n */\nconst AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 12.0.0\n */\nconst AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass _MatAutocompleteTriggerBase {\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._defaults = _defaults;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /** Whether or not the label state is being overridden. */\n        this._manuallyFloatingLabel = false;\n        /** Subscription to viewport size changes. */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /** Stream of keyboard events that can close the panel. */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        };\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when autocomplete has been touched` */\n        this._onTouched = () => { };\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * @docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /** Stream of autocomplete option selections. */\n        this.optionSelections = defer(() => {\n            if (this.autocomplete && this.autocomplete.options) {\n                return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable\n                .pipe(take(1), switchMap(() => this.optionSelections));\n        });\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    get autocompleteDisabled() { return this._autocompleteDisabled; }\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    ngAfterViewInit() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    ngOnDestroy() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /** Opens the autocomplete suggestion panel. */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /** Closes the autocomplete suggestion panel. */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            this._overlayRef.updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n            this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n            of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => event instanceof MatOptionSelectionChange ? event : null));\n    }\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n    _getOutsideClickStream() {\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend'))\n            .pipe(filter(event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            const clickTarget = (this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                event.target);\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n            return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        Promise.resolve(null).then(() => this._setTriggerValue(value));\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE && !hasModifierKey(event)) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n            }\n        }\n    }\n    _handleInput(event) {\n        let target = event.target;\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    _subscribeToClosingActions() {\n        const firstStable = this._zone.onStable.pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n            const wasOpen = this.panelOpen;\n            this._resetActiveItem();\n            this.autocomplete._setVisibility();\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                    this.autocomplete.opened.emit();\n                }\n            }\n            return this.panelClosingActions;\n        }), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event));\n    }\n    /** Destroys the autocomplete suggestion panel. */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    _setTriggerValue(value) {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n        this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    _setValueAndClose(event) {\n        if (event && event.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n            this.autocomplete._emitSelectEvent(event.source);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach(option => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n    _attachOverlay() {\n        var _a;\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        // We want to resolve this once, as late as possible so that we can be\n        // sure that the element has been moved into its final place in the DOM.\n        if (this._isInsideShadowRoot == null) {\n            this._isInsideShadowRoot = !!_getShadowRoot(this._element.nativeElement);\n        }\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, { id: (_a = this._formField) === null || _a === void 0 ? void 0 : _a.getLabelId() });\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe(event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n                    (event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey'))) {\n                    this._resetActiveItem();\n                    this._closeKeyEventStream.next();\n                    // We need to stop propagation, otherwise the event will eventually\n                    // reach the input itself and cause the overlay to be reopened.\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            });\n            this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                if (this.panelOpen && overlayRef) {\n                    overlayRef.updateSize({ width: this._getPanelWidth() });\n                }\n            });\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    _getOverlayConfig() {\n        var _a;\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir,\n            panelClass: (_a = this._defaults) === null || _a === void 0 ? void 0 : _a.overlayPanelClass,\n        });\n    }\n    _getOverlayPosition() {\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' }\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        const panelClass = this._aboveClass;\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass }\n        ];\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    _resetActiveItem() {\n        const autocomplete = this.autocomplete;\n        if (autocomplete.autoActiveFirstOption) {\n            // Note that we go through `setFirstItemActive`, rather than `setActiveItem(0)`, because\n            // the former will find the next enabled option, if the first one is disabled.\n            autocomplete._keyManager.setFirstItemActive();\n        }\n        else {\n            autocomplete._keyManager.setActiveItem(-1);\n        }\n    }\n    /** Determines whether the panel can be opened. */\n    _canOpen() {\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        var _a;\n        return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n    }\n    /** Scrolls to a particular option in the list. */\n    _scrollToOption(index) {\n        // Given that we are not actually focusing active options, we must manually adjust scroll\n        // to reveal options below the fold. First, we find the offset of the option from the top\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n        // the panel height + the option height, so the active option will be just visible at the\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\n        // not adjusted.\n        const autocomplete = this.autocomplete;\n        const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            autocomplete._setScrollTop(0);\n        }\n        else if (autocomplete.panel) {\n            const option = autocomplete.options.toArray()[index];\n            if (option) {\n                const element = option._getHostElement();\n                const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n                autocomplete._setScrollTop(newScrollPosition);\n            }\n        }\n    }\n}\n_MatAutocompleteTriggerBase.ɵfac = function _MatAutocompleteTriggerBase_Factory(t) { return new (t || _MatAutocompleteTriggerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, 8)); };\n_MatAutocompleteTriggerBase.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteTriggerBase, inputs: { position: [\"matAutocompletePosition\", \"position\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"], autocomplete: [\"matAutocomplete\", \"autocomplete\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"] }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n_MatAutocompleteTriggerBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }, { type: Host }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n];\n_MatAutocompleteTriggerBase.propDecorators = {\n    autocomplete: [{ type: Input, args: ['matAutocomplete',] }],\n    position: [{ type: Input, args: ['matAutocompletePosition',] }],\n    connectedTo: [{ type: Input, args: ['matAutocompleteConnectedTo',] }],\n    autocompleteAttribute: [{ type: Input, args: ['autocomplete',] }],\n    autocompleteDisabled: [{ type: Input, args: ['matAutocompleteDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteTriggerBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc3.Overlay }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc4.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc6.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }, {\n                type: Host\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc5.ViewportRuler }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }]; }, { position: [{\n            type: Input,\n            args: ['matAutocompletePosition']\n        }], autocompleteAttribute: [{\n            type: Input,\n            args: ['autocomplete']\n        }], autocompleteDisabled: [{\n            type: Input,\n            args: ['matAutocompleteDisabled']\n        }], autocomplete: [{\n            type: Input,\n            args: ['matAutocomplete']\n        }], connectedTo: [{\n            type: Input,\n            args: ['matAutocompleteConnectedTo']\n        }] }); })();\nclass MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\n    constructor() {\n        super(...arguments);\n        this._aboveClass = 'mat-autocomplete-panel-above';\n    }\n}\nMatAutocompleteTrigger.ɵfac = /*@__PURE__*/ function () { let ɵMatAutocompleteTrigger_BaseFactory; return function MatAutocompleteTrigger_Factory(t) { return (ɵMatAutocompleteTrigger_BaseFactory || (ɵMatAutocompleteTrigger_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteTrigger)))(t || MatAutocompleteTrigger); }; }();\nMatAutocompleteTrigger.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteTrigger, selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]], hostAttrs: [1, \"mat-autocomplete-trigger\"], hostVars: 7, hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() { return ctx._handleFocus(); })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() { return ctx._onTouched(); })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) { return ctx._handleInput($event); })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", !ctx.autocompleteDisabled);\n    } }, exportAs: [\"matAutocompleteTrigger\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n        type: Directive,\n        args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    'class': 'mat-autocomplete-trigger',\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    '[attr.aria-haspopup]': '!autocompleteDisabled',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)'\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.ɵfac = function MatAutocompleteModule_Factory(t) { return new (t || MatAutocompleteModule)(); };\nMatAutocompleteModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatAutocompleteModule });\nMatAutocompleteModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [OverlayModule,\n        MatOptionModule,\n        MatCommonModule,\n        CommonModule, CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                    CommonModule\n                ],\n                exports: [\n                    MatAutocomplete,\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    CdkScrollableModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, { declarations: function () { return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin]; }, imports: function () { return [OverlayModule,\n        MatOptionModule,\n        MatCommonModule,\n        CommonModule]; }, exports: function () { return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin, CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };\n\n"],"names":["ActiveDescendantKeyManager","coerceBooleanProperty","coerceStringArray","Platform","_getShadowRoot","InjectionToken","EventEmitter","Directive","ChangeDetectorRef","ElementRef","Inject","ViewChild","TemplateRef","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","forwardRef","ViewContainerRef","NgZone","Optional","Host","NgModule","mixinDisableRipple","MAT_OPTION_PARENT_COMPONENT","MAT_OPTGROUP","MatOption","MatOptionSelectionChange","_countGroupLabelsBeforeOption","_getOptionScrollPosition","MatOptionModule","MatCommonModule","Subscription","Subject","defer","merge","of","fromEvent","DOCUMENT","CommonModule","Overlay","OverlayConfig","OverlayModule","ViewportRuler","CdkScrollableModule","Directionality","ESCAPE","hasModifierKey","ENTER","UP_ARROW","DOWN_ARROW","TAB","TemplatePortal","NG_VALUE_ACCESSOR","MatFormField","MAT_FORM_FIELD","take","switchMap","filter","map","tap","delay","ɵngcc0","ɵngcc1","ɵngcc2","ɵngcc3","ɵngcc4","ɵngcc5","ɵngcc6","_c0","MatAutocomplete_ng_template_0_Template","rf","ctx","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","formFieldId_r1","id","ctx_r0","ɵɵnextContext","ɵɵproperty","_classList","ɵɵattribute","ariaLabel","_getPanelAriaLabelledby","_c1","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","constructor","source","option","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","_MatAutocompleteBase","_changeDetectorRef","_elementRef","defaults","platform","_activeOptionChanges","EMPTY","showPanel","_isOpen","displayWith","optionSelected","opened","closed","optionActivated","inertGroups","SAFARI","_autoActiveFirstOption","isOpen","value","classList","length","reduce","className","_setVisibilityClasses","nativeElement","ngAfterContentInit","_keyManager","options","withWrap","change","subscribe","index","emit","toArray","_setVisibility","ngOnDestroy","unsubscribe","_setScrollTop","scrollTop","panel","_getScrollTop","markForCheck","_emitSelectEvent","event","labelId","labelExpression","ariaLabelledby","_visibleClass","_hiddenClass","ɵfac","_MatAutocompleteBase_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","type","viewQuery","_MatAutocompleteBase_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","template","first","inputs","panelWidth","outputs","features","ɵɵInheritDefinitionFeature","ctorParameters","undefined","decorators","args","propDecorators","static","ngDevMode","ɵsetClassMetadata","MatAutocomplete","arguments","ɵMatAutocomplete_BaseFactory","MatAutocomplete_Factory","ɵɵgetInheritedFactory","ɵcmp","ɵɵdefineComponent","selectors","contentQueries","MatAutocomplete_ContentQueries","dirIndex","ɵɵcontentQuery","optionGroups","hostAttrs","disableRipple","exportAs","ɵɵProvidersFeature","provide","useExisting","ngContentSelectors","decls","vars","consts","MatAutocomplete_Template","ɵɵprojectionDef","ɵɵtemplate","dependencies","NgClass","styles","encapsulation","changeDetection","descendants","selector","None","OnPush","host","providers","_MatAutocompleteOriginBase","elementRef","_MatAutocompleteOriginBase_Factory","MatAutocompleteOrigin","ɵMatAutocompleteOrigin_BaseFactory","MatAutocompleteOrigin_Factory","AUTOCOMPLETE_OPTION_HEIGHT","AUTOCOMPLETE_PANEL_HEIGHT","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","multi","getMatAutocompleteMissingPanelError","Error","_MatAutocompleteTriggerBase","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_defaults","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","onSelectionChange","onStable","pipe","_scrollStrategy","autocompleteDisabled","ngAfterViewInit","window","_getWindow","runOutsideAngular","addEventListener","ngOnChanges","changes","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","removeEventListener","_destroyPanel","complete","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","hasAttached","detach","_closingActionsSubscription","detectChanges","panelClosingActions","tabOut","_getOutsideClickStream","detachments","activeOption","activeItem","clickTarget","_isInsideShadowRoot","composedPath","target","formField","customOrigin","connectedTo","contains","overlayElement","writeValue","Promise","resolve","then","_setTriggerValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","_handleKeydown","keyCode","preventDefault","_selectViaInteraction","_resetActiveItem","prevActiveItem","isArrowKey","onKeydown","_canOpen","_scrollToOption","activeItemIndex","_handleInput","parseFloat","_previousValue","_handleFocus","shouldAnimate","floatLabel","_animateAndLockLabel","_subscribeToClosingActions","firstStable","optionChanges","reapplyLastPosition","wasOpen","_setValueAndClose","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","skip","forEach","selected","deselect","_a","overlayRef","_portal","getLabelId","create","_getOverlayConfig","keydownEvents","next","stopPropagation","updateSize","width","_getPanelWidth","setOrigin","_getConnectedElement","attach","positionStrategy","_getOverlayPosition","direction","panelClass","overlayPanelClass","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","belowPositions","originX","originY","overlayX","overlayY","_aboveClass","abovePositions","positions","withPositions","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","setFirstItemActive","setActiveItem","element","readOnly","defaultView","labelCount","_getHostElement","newScrollPosition","offsetTop","offsetHeight","_MatAutocompleteTriggerBase_Factory","ɵɵNgOnChangesFeature","ɵMatAutocompleteTrigger_BaseFactory","MatAutocompleteTrigger_Factory","hostVars","hostBindings","MatAutocompleteTrigger_HostBindings","ɵɵlistener","MatAutocompleteTrigger_focusin_HostBindingHandler","MatAutocompleteTrigger_blur_HostBindingHandler","MatAutocompleteTrigger_input_HostBindingHandler","$event","MatAutocompleteTrigger_keydown_HostBindingHandler","toString","MatAutocompleteModule","MatAutocompleteModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","declarations","ngJitMode","ɵɵsetNgModuleScope"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}